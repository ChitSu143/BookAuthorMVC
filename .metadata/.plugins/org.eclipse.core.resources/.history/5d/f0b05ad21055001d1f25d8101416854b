package com.hostmdy.jpa.data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;

import com.hostmdy.jpa.entity.Author;
import com.hostmdy.jpa.entity.Book;
import com.hostmdy.jpa.repostory.AuthorRepository;
import com.hostmdy.jpa.repostory.BookRepository;

@Component
public class InitialDataLoader implements ApplicationListener<ContextRefreshedEvent> {
	
	private BookRepository bookRepository;
	
	private AuthorRepository authorRepoitory;
	
	// Decencies injection Initial Data Loader composed of book and author repository
	// To do this decencies injection , sprin bean is required
	public InitialDataLoader(BookRepository bookRepository, AuthorRepository authorRepoitory) {
		super();
		this.bookRepository = bookRepository;
		this.authorRepoitory = authorRepoitory;
	}



	@Override
	public void onApplicationEvent(ContextRefreshedEvent event) {
		initialized();
	}
	
	
	
	private void initialized()
	{
		Book book1=new Book("Doman Driven Design","Programming",34.5);
		Author author1=new Author("Eric", "Evan",60,"eric@gmail.com");
		book1.getAuthors().add(author1);		
		author1.getBooks().add(book1);		
		authorRepoitory.save(author1);
		bookRepository.save(book1);
		
		Book book2=new Book("Doman Driven Design1","Programming",34.5);
		Author author2=new Author("Eric2", "Evan",80,"eric@gmail.com");
		book2.getAuthors().add(author2);		
		author2.getBooks().add(book2);		
		
		bookRepository.save(book2);
		authorRepoitory.save(author2);
		
		Book book3=new Book("Doman Driven Design2","Programming",34.5);
		Author author3=new Author("Eric3", "Evan",120,"eric@gmail.com");
		book3.getAuthors().add(author3);		
		author3.getBooks().add(book3);		
		
		bookRepository.save(book3);
		authorRepoitory.save(author3);
		
		
	}

}
